<?php

namespace Caravane\LunchBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LunchRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LunchRepository extends EntityRepository
{
	
	public function getAll($lat,$lng,$zoom,$boundaries,$sortBy) {
		//print_r($boundaries);
		$em = $this->getEntityManager();
		$qb = $em->createQueryBuilder();
		/*
		 * $qb = $this->createQueryBuilder('L')
		->select('L,R,GEO(R.lat = :lat, R.lng = :lng) AS distance')
		->leftJoin('L.restaurant', 'R')
		->having('distance < :radius')
		->addOrderBy($sortBy)
		->setParameter('lat', $lat)
		->setParameter('lng', $lng)
		->setParameter('radius', $radius);
		if($filterBy!='') {
			$qb->where("L.category = :category")
			->setParameter('category', $filterBy);
		}
		 */
		 
		 
		 switch($sortBy) {
		 	default:
				$sortBy="L.".$sortBy;
				break;
			case 'distance':
				$sortBy="distance";
				break;
		 }
		 $qb = $this->createQueryBuilder('L')
		->select('L.id,L.name as lunchName,L.price,R.name AS restaurantName,R.lat,R.lng,R.currency,C.slug AS categorySlug,GEO(R.lat=:lat,R.lng=:lng) AS distance')
		//->select(array('L.name','GEO(R.lat=:lat,R.lng=:lng) AS distance'))
		->leftJoin('L.restaurant', 'R')
		->leftJoin('L.category', 'C')
		//->having('distance < :radius')
		//->addOrderBy($sortBy)
		->where('L.date = :date')
		->andWhere("(R.lat BETWEEN :s AND :n) AND (R.lng BETWEEN :w AND :e)")
   		->addOrderBy($sortBy)
		->setParameter('date', date('Y-m-d'))
		->setParameter('lat', $lat)
		->setParameter('lng', $lng)
		->setParameter('n', $boundaries[0])
		->setParameter('e', $boundaries[1])
		->setParameter('s', $boundaries[2])
		->setParameter('w', $boundaries[3])
		;
		//->setParameter('radius', $radius);
				
		/*
		
		$qb->select(array('L', 'R','GEO(R.lat = :lat, R.lng = :lng) AS distance'))
	   ->from('Caravane\LunchBundle\Entity\Lunch', 'L')
	   ->leftJoin('L.restaurant', 'R')
   		->add('where', "L.date = '".date('Y-m-d')."' AND (R.lat BETWEEN '".$boundaries[2]."' AND '".$boundaries[0]."') AND (R.lng BETWEEN '".$boundaries[3]."' AND '".$boundaries[1]."')")
   		
   		->setParameter('lat', $lat)
		->setParameter('lng', $lng);
		//->add('orderBy', $orderBy.' ASC');
		 * */
   /*
		$qb = $em->getRepository('CaravaneLunchBundle:Lunch')->createQueryBuilder('L');
		
		$qb->add('select', 'L')
		//->add('where', 'L.status = 1')
		->add('where', "L.date = '".date('Y-m-d')."'");
		
	  */
		$q = $qb->getQuery();
		$entities=$q->getResult();
		
		
		
		$entities= $qb->getQuery()->getResult();
		
		foreach($entities[0] as $entity) {
		//	echo $entity->getId();
		//	$entity->setDistance($this->distance_two_point($lat,$lng,$entity->getRestaurant()->getLat(),$entity->getRestaurant()->getLng()));
		}
	//	print_r($entities);
		return $entities;
	}
	
	
	public function distance_two_point($lat1,$lng1,$lat2,$lng2) {
        $resultDistance = $this->distance_haversine('km',$lat1, $lng1, $lat2, $lng2);
        
        return $resultDistance;
	}
	
	
	protected function distance_haversine($metric='km',$latitude1, $longitude1, $latitude2, $longitude2) {
        if ($metric != 'km') {
			$earthRadius = 3960.00; 
        } else {
            $earthRadius = 6371.00;    
         } 
        $dLatitude = $latitude2 - $latitude1 ;
        $dLongitude = $longitude2 - $longitude1 ;
  
        $alpha = $dLatitude/2;
        $beta = $dLongitude/2;
          
        $a = sin(deg2rad($alpha)) * sin(deg2rad($alpha)) + cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * sin(deg2rad($beta)) * sin(deg2rad($beta)) ;
        $c = asin(min(1, sqrt($a)));
          
        $distance = 2*$earthRadius * $c;
        $distance = round($distance, 3);
         
        return $distance;
	}


	public function findByUser(\Caravane\UserBundle\Entity\User $user) {
		 $qb = $this->createQueryBuilder('L')
		->select('L.id,L.name as lunchName,L.price,R.name AS restaurantName,R.currency,C.slug AS categorySlug')
		//->select(array('L.name','GEO(R.lat=:lat,R.lng=:lng) AS distance'))
		->leftJoin('L.restaurant', 'R')
		->leftJoin('L.category', 'C')
		//->having('distance < :radius')
		//->addOrderBy($sortBy)
		->where('R.user = :user')
		->setParameter('user', $user)
		
		;
		$entities= $qb->getQuery()->getResult();
		return $entities;
	}
}